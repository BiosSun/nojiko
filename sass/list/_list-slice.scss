@charset "utf-8";

////
/// @group list
/// @author Bios Sun <biossun@gmail.com>
////

/// 获取列表中的子集
///
/// @param {List} $list - 源数据列表
/// @param {Number} $start [1] - 起始下标，第一个元素的下标为 0
/// @param {Number} $end [length($list)] - 结束下标，所截取的子集中包含该下标元素
///
/// @example
///     $list: a, b, c, d, e;
///     list-slice($list, 2, 4);   // b, c, d
///     list-slice($list, 2);      // b, c, d, e
@function list-slice($list, $start: 1, $end: length($list)) {
    $length: length($list);
    $result: ();

    $debugFlat: "[ function: list-slice ]";
    $debugInfo:  "{ $start: #{$start}, $end: #{$end}, $list: #{$list} }";

    @if type-of($start) != number {
        @warn "#{$debugFlat} start are not a number, return a empty list. #{$debugInfo}";
        @return $result;
    }

    @if type-of($end) != number {
        @warn "#{$debugFlat} end are not a number, return a empty list. #{$debugInfo}";
        @return $result;
    }

    @if not unitless($start) {
        @warn "#{$debugFlat} start has unit, strip the unit. #{$debugInfo}";
        $start: strip-unit($start);
    }

    @if not unitless($end) {
        @warn "#{$debugFlat} end has unit, strip the unit. #{$debugInfo}";
        $end: strip-unit($end);
    }

    @if $start < 0 {
        $start: $length + $start + 1;
    }

    @if $end < 0 {
        $end: $length + $end + 1;
    }

    @if $end > $length {
        @warn "#{$debugFlat} end is greater than the list length, reset $end to the list length. #{$debugInfo}";
        $end: $length;
    }

    @if $start < 1 {
        @warn "#{$debugFlat} start is less than 1, return a empty list. #{$debugInfo}";
        @return $result;
    }

    @if $start > $length {
        @warn "#{$debugFlat} start is greater than the list length, return a empty list. #{$debugInfo}";
        @return $result;
    }

    @if $end < 1 {
        @warn "#{$debugFlat} end is less than 1, return a empty list.  #{$debugInfo}";
        @return $result;
    }

    @if $start > $end {
        @warn "#{$debugFlat} start is greater than end, return a empty list.  #{$debugInfo}";
        @return $result;
    }

    @for $i from $start through $end {
        $result: append($result, nth($list, $i), list-separator($list));
    }

    @return $result;
}
