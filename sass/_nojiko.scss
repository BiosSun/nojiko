@charset "utf-8";

/*!
 * nojiko - 0.4.8
 * normalize.css - 3.0.1
 * @license: MIT  - https://github.com/BiosSun/nojiko/blob/master/LICENSE-MIT
 * @url: https://github.com/BiosSun/nojiko
 */

// ===========================================================================================================
// 展开使用速记语法声明的方向类型复合值，比如 margin，padding 属性的值。
//
// example:
//   nojiko-expand(1px);             // 1px 1px 1px 1px
//   nojiko-expand(1px 2px);         // 1px 2px 1px 2px
//   nojiko-expand(1px 2px 3px);     // 1px 2px 3px 2px
//   nojiko-expand(1px 2px 3px 4px); // 1px 2px 3px 4px
// ===========================================================================================================

@function nojiko-expand($shorthand) {
    @if length($shorthand) == 1 {
        @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
    }
    @else if length($shorthand) == 2 {
        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
    }
    @else if length($shorthand) == 3 {
        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
    }
    @else {
        @return $shorthand;
    }
}

// ===========================================================================================================
// 遍历所提供的一组 input 元素选择器，为每个元素选择器附加伪类。
//
// @examples:
//   nojiko-attach-inputs('input[text]' 'input[password]', :hover);   // input[text], input[password]
// ===========================================================================================================

@function nojiko-attach-inputs($inputs, $attached: null) {
    $list: ();

    @each $input in $inputs {
        $input: unquote($input);
        @if $attached { $input: $input + ":" + $attached; }
        $list: append($list, $input, comma);
    }

    @return $list;
}

$TEXT-INPUTS-LIST: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';

$ALL-TEXT-INPUTS: nojiko-attach-inputs($TEXT-INPUTS-LIST);
$ALL-TEXT-INPUTS-HOVER: nojiko-attach-inputs($TEXT-INPUTS-LIST, 'hover');
$ALL-TEXT-INPUTS-FOCUS: nojiko-attach-inputs($TEXT-INPUTS-LIST, 'focus');

$BUTTON-INPUTS-LIST: 'input[type="button"]',
                     'input[type="reset"]',
                     'input[type="submit"]';

$ALL-BUTTON-INPUTS: nojiko-attach-inputs($BUTTON-INPUTS-LIST);
$ALL-BUTTON-INPUTS-HOVER: nojiko-attach-inputs($BUTTON-INPUTS-LIST, 'hover');
$ALL-BUTTON-INPUTS-FOCUS: nojiko-attach-inputs($BUTTON-INPUTS-LIST, 'focus');
$ALL-BUTTON-INPUTS-ACTIVE: nojiko-attach-inputs($BUTTON-INPUTS-LIST, 'active');

// 英文无衬线字体集
$FONT-FAMILY-SANS-SERIF:         "Helvetica Neue", Helvetica, Arial, sans-serif;
// 英文衬线字体集
$FONT-FAMILY-SERIF:              Georgia, "Times New Roman", Times, serif;
// 英文等宽字体集
$FONT-FAMILY-FIXED-FONT:         Menlo, Monaco, Consolas, "Courier New", monospace;
// 较适合中文环境的无衬线字体集
$FONT-FAMILY-CHINESE-SANS-SERIF: "Helvetica Neue", "Hiragino Sans GB", "Segoe UI", "Microsoft Yahei", "微软雅黑", Tahoma, Arial, STHeiti, sans-serif !default;

// =============================================================================
// 判断一个值是否是 default
// =============================================================================

@function is-default($val) {
    @return $val == true or $val == default;
}

@function not-default($val) {
    @return if(is-default($val), false, true);
}

// =============================================================================
// 判断一个值是否是 merge
// =============================================================================

@function is-merge($val) {
    @return $val == true or $val == merge;
}

@function not-merge($val) {
    @return if(is-merge($val), false, true);
}

// =============================================================================
// Programatically determines whether a color is dark
// Returns a boolean
// More details here http://robots.thoughtbot.com/closer-look-color-lightness
// =============================================================================

@function is-dark($hex-color) {
    @return if(is-light($hex-color), false, true);
}

// =============================================================================
// Programatically determines whether a color is light
// Returns a boolean
// More details here http://robots.thoughtbot.com/closer-look-color-lightness
// =============================================================================

@function is-light($hex-color) {
    $-local-red: red(rgba($hex-color, 1.0));
    $-local-green: green(rgba($hex-color, 1.0));
    $-local-blue: blue(rgba($hex-color, 1.0));

    $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;

    @return $-local-lightness > .6;
}

// ===========================================================================================================
// 设置集合
//
// @example:
//    map-set((key: val), key, val);
// ===========================================================================================================

@function map-set($source, $key, $value) {
    @return map-merge($source, ($key: $value));
}

// =============================================================================
// 合并两个 map
// =============================================================================

@function map-extend($target-map, $source-map) {
    $target-map: if($target-map, $target-map, ());

    @each $key, $value in $source-map {
        @if $value {
            $target-map: map-set($target-map, $key, $value);
        }
    }

    @return $target-map;
}

// -----------------------------------------------------------------------------
// 该方法用于操纵全局配色集合
// -----------------------------------------------------------------------------

$color-maps: () !default;

@function set-color-maps(
    $name,
    $color,
    $text: null,
    $border: null,
    $is-default: false
) {
    @if is-default($text) {
        $is-default: true;
        $text: null;
    }

    @if is-default($border) {
        $is-default: true;
        $border: null;
    }

    // $text default value.
    $text: if($text, $text, #fff);

    // border default value.
    $border: if($border, $border, darken($color, 7));

    // set map
    @if (is-default($is-default) and map-has-key($color-maps, $name)) == false {
        @return map-set($color-maps, $name, (
                            color: $color,
                            border: $border,
                            text: $text
                        ));
    }
    @else {
        @return $color-maps;
    }
}

// -----------------------------------------------------------------------------
// 该方法用于操纵全局备选配色集合
// -----------------------------------------------------------------------------

$alternative-color-maps: () !default;

@function set-alternative-color-maps(
    $name,
    $color,
    $text: null,
    $border: null,
    $is-default: false
) {
    @if is-default($text) {
        $is-default: true;
        $text: null;
    }

    @if is-default($border) {
        $is-default: true;
        $border: null;
    }

    // $text default value.
    $text: if($text, $text, #fff);

    // border default value.
    $border: if($border, $border, darken($color, 7));

    // set map
    @if (is-default($is-default) and map-has-key($alternative-color-maps, $name)) == false {
        @return map-set($alternative-color-maps, $name, (
                            color: $color,
                            border: $border,
                            text: $text
                        ));
    }
    @else {
        @return $alternative-color-maps;
    }
}

// =============================================================================
// 设置盒模型集合
// =============================================================================

$element-box-maps: () !default;

@function set-element-box-maps(
    $name,
    $padding-vertical: null,
    $padding-horizontal: null,
    $border-width: null,
    $border-radius: null,
    $font-size: null,
    $line-height: null,
    $is-default: false,
    $is-merge: false
) {
    // set map
    @if (is-default($is-default) and map-has-key($element-box-maps, $name)) == false {
        $map: (
            padding-vertical: $padding-vertical,
            padding-horizontal: $padding-horizontal,
            border-width: $border-width,
            font-size: $font-size,
            line-height: $line-height,
            border-radius: $border-radius
        );

        @if is-merge($is-merge) {
            $map: map-merge(map-get($element-box-maps, $name), map);
        }

        @return map-set($element-box-maps, $name, $map);
    }
    @else {
        @return $element-box-maps;
    }
}

// =============================================================================
// 计算并返回所指定盒尺寸的实际高度
// @param $name {String} 盒尺寸配置名称
// @param $box-sizing {String} 盒模型计算模式
// @param $row-number 文本内容的行数
// =============================================================================
@function get-element-box-height-by-name (
    $name: $default-element-box-name,
    $box-sizing: $default-box-sizing,
    $row-number: 1
) {
    $map: map-get($element-box-maps, $name);
    $h:   map-get($map, height);
    $pv:  map-get($map, padding-vertical);
    $bw:  map-get($map, border-width);
    $fs:  map-get($map, font-size);
    $lh:  map-get($map, line-height);

    $fs:  if($fs, $fs, $font-size-base);
    $lh:  if($lh, $lh, $line-height-base);
    $clh: computed-line-height($fs, $lh);

    $eh:  0;

    @if $box-sizing == border-box and $h {
        $eh: $h;
    }
    @else {
        $outer: $pv * 2 + $bw * 2;

        @if $h {
            $eh: $outer + $h;
        }
        @else {
            $eh: $outer + $clh * $row-number;
        }
    }

    @return $eh;
}

// ===========================================================================================================
// 获取计算为绝对值的行高
//
// @example:
//    line-height: computed-line-height();
//    line-height: computed-line-height(12px, 1.428);
// ===========================================================================================================

@function computed-line-height($font-size: $font-size-base, $line-height: $line-height-base) {
    @return if(unit($line-height) == 'px', $line-height, floor($font-size * $line-height));
}

// ===========================================================================================================
// 设置元素的宽度和高度
//
// @example:
//    size(10px);
//    size(10px, 20px);
//    size(10px, false);
// ===========================================================================================================

@mixin size($w, $h: $w) {
    @if $w { width: $w;  }
    @if $h { height: $h; }
}

// ===========================================================================================================
// 通过该方法定义浮动，可以避免在 IE6 浏览器中
// 浮动元素出现双倍外边距的问题。
//
// 如果项目不需要兼容 IE6，可以不使用该方法。
// ===========================================================================================================

@mixin float($direction) {
    float: $direction;
    _display: inline;
}

@mixin opacity($opacity) {
    opacity: $opacity;
    @if $support-for-ie6 or $support-for-ie7 or $support-for-ie8 {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }
}

@mixin transparent {
    @include opacity(0);
}

@mixin opaque {
    @include opacity(1);
}

// ===========================================================================================================
// 用于快速书写 postion 相关样式规则，可以同时定义 position，left，right，top，bottom 以及 z-index 五个规则。
//
// @example:
//    position(absolute, 20px 0 0, 1000);
// ===========================================================================================================

@mixin position($position: relative, $coordinates: null null null null, $z-index: null) {
    position: $position;

    $coordinates: nojiko-expand($coordinates);

    $top:    nth($coordinates, 1);
    $right:  nth($coordinates, 2);
    $bottom: nth($coordinates, 3);
    $left:   nth($coordinates, 4);

    @if $top    { top:    $top;    }
    @if $right  { right:  $right;  }
    @if $bottom { bottom: $bottom; }
    @if $left   { left:   $left;   }

    @if $position == absolute and $support-for-ie6 {
        _zoom: 1; // IE6 中的绝对定位是相对内容区域定位，而非包含内边距在内的区域
    }

    @if $z-index { z-index: $z-index; }
}

// ===========================================================================================================
// padding 的速写格式
//
// example:
//   padding(1px);               // 1px 1px 1px 1px
//   padding(1px null);          // 1px 2px 1px 2px
// ===========================================================================================================

@mixin padding($vals) {
    $coordinates: nojiko-expand($vals);

    $top:    nth($coordinates, 1);
    $right:  nth($coordinates, 2);
    $bottom: nth($coordinates, 3);
    $left:   nth($coordinates, 4);

    @if $top and $right and $bottom and $left {
        padding: $vals;
    }
    @else {
        @if $top {
            padding-top: $top;
        }

        @if $right {
            padding-right: $right;
        }
        @if $bottom {
            padding-bottom: $bottom;
        }
        @if $left {
            padding-left: $left;
        }
    }
}

// ===========================================================================================================
// margin 的速写格式
//
// example:
//   margin(1px);               // 1px 1px 1px 1px
//   margin(1px null);          // 1px 2px 1px 2px
// ===========================================================================================================

@mixin margin($vals) {
    $coordinates: nojiko-expand($vals);

    $top:    nth($coordinates, 1);
    $right:  nth($coordinates, 2);
    $bottom: nth($coordinates, 3);
    $left:   nth($coordinates, 4);

    @if $top and $right and $bottom and $left {
        margin: $vals;
    }
    @else {
        @if $top {
            margin-top: $top;
        }

        @if $right {
            margin-right: $right;
        }
        @if $bottom {
            margin-bottom: $bottom;
        }
        @if $left {
            margin-left: $left;
        }
    }
}

// =============================================================================
// 清除元素左右浮动
//
// Originated from:
//   Micro clearfix: [http://nicolasgallagher.com/micro-clearfix-hack/]
// =============================================================================

@mixin clearfix {
    @if $support-for-ie6 or $support-for-ie7 {
        *zoom: 1;
    }

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

// =============================================================================
// https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757c9e03dda4e463fb0d4db5a5f82d7
// =============================================================================

@mixin hide-text {
    color: transparent;
    font: 0/0 a;
    text-shadow: none;

    @if support-for-ie6 or support-for-ie7 or support-for-ie8 {
        overflow: hidden; // for IE6; or IE7 and IE 8
    }
}

// =============================================================================
// 支持 IE6/7 的行内块元素
// =============================================================================

@mixin inline-block ($vertical-align : baseline) {
    display: inline-block;
    vertical-align: $vertical-align;
    *zoom: 1;
    *display: inline;
}

// =============================================================================
// 小三角箭头样式
// =============================================================================

@mixin arrows-style($width, $orientation : bottom, $color : inherit) {
    @include inline-block(middle);

    width: 0;
    height: 0;
    font: 0/0 a;

    @include position(relative, -1px false false);

    @if $support-for-ie6 or $support-for-ie7 {
        *top: 0;
    }

    @if $color == inherit {
        $color: unquote('');
    }

    @if $orientation == bottom {
        border-top: $width solid $color;
        border-right: $width dashed transparent;
        border-left: $width dashed transparent;
    }
    @else if $orientation == top {
        border-bottom: $width solid $color;
        border-right: $width dashed transparent;
        border-left: $width dashed transparent;
    }
    @else if $orientation == right {
        border-left: $width solid $color;
        border-top: $width dashed transparent;
        border-bottom: $width dashed transparent;
    }
    @else if $orientation == left {
        border-right: $width solid $color;
        border-top: $width dashed transparent;
        border-bottom: $width dashed transparent;
    }
}

// =============================================================================
// 一个尺寸配置对象中包含如下属性：
//   padding-vertical: 垂直内边距
//   padding-horizontal: 水平内边距
//   border-width: 边框宽度
//   border-radius: 边框圆角
//   font-size: 文字大小
//   line-height: 行高
//   width: 元素宽度，一般不指定
//   height: 元素高度，一般不指定
// =============================================================================


// =============================================================================
// 私有函数
// 以 $element-box-maps 中的某个尺寸配置为基础生成一个新的定制的尺寸配置。
// =============================================================================
@function nojiko-get-distinctive-element-box-by-name(
    $name:                 null,
    $width:                null,
    $height:               null,
    $padding-vertical:     null,
    $padding-horizontal:   null,
    $border-width:         null,
    $border-radius:        null,
    $font-size:            null,
    $line-height:          null
) {
    $eb:  map-get($element-box-maps, $name);
    $eb:  if($eb, $eb, ());
    $deb: ();

    @if $width              { $deb: map-set($deb, width,              $width);              }
    @if $height             { $deb: map-set($deb, height,             $height);             }
    @if $padding-vertical   { $deb: map-set($deb, padding-vertical,   $padding-vertical);   }
    @if $padding-horizontal { $deb: map-set($deb, padding-horizontal, $padding-horizontal); }
    @if $border-width       { $deb: map-set($deb, border-width,       $border-width);       }
    @if $border-radius      { $deb: map-set($deb, border-radius,      $border-radius);      }
    @if $font-size          { $deb: map-set($deb, font-size,          $font-size);          }
    @if $line-height        { $deb: map-set($deb, line-height,        $line-height);        }

    @return map-merge( map-merge( (), $eb ), $deb );
};

// =============================================================================
// 私有函数
// 将一个尺寸配置中的边框宽度转移给内边据
// =============================================================================
@function nojiko-transfer-element-box-border-width($element-box) {
    $bw: map-get($element-box, border-width);
    $pv: map-get($element-box, padding-vertical);
    $ph: map-get($element-box, padding-horizontal);

    @if $bw {
        $pv: if($pv, $pv + $bw, $bw);
        $ph: if($ph, $ph + $bw, $bw);
    }

    @return map-merge(
        $element-box,
        (
            border-width: 0,
            padding-vertical: $pv,
            padding-horizontal: $ph
        )
    );
}

// =============================================================================
// 私有函数
// 除去一个尺寸配置中的水平内边距
// =============================================================================
@function nojiko-trim-element-box-padding-horizontal($element-box) {
    @return map-merge($element-box,
        (padding-horizontal: 0)
    );
}

// =============================================================================
// 设置元素盒模型
// @param width 宽度
// @param height 高度
// @param $padding-vertical 垂直内边距
// @param $padding-horizontal 水平内边距
// @param $font-size 文字大小
// @param $line-height 文字行高
// @param border-width 边框宽度
// @param border-radius 圆角
// =============================================================================

@mixin element-box(
    $width:                null,
    $height:               null,
    $padding-vertical:     null,
    $padding-horizontal:   null,
    $border-width:         null,
    $border-radius:        null,
    $font-size:            null,
    $line-height:          null
) {

    @if $width {
        width: $width;
    }

    @if $height {
        height: $height;
    }

    @if $padding-vertical and $padding-horizontal {
        padding: $padding-vertical $padding-horizontal;
    }
    @else if $padding-vertical {
        padding: {
            top: $padding-vertical;
            bottom: $padding-vertical;
        }
    }
    @else if $padding-horizontal {
        padding: {
            left: $padding-horizontal;
            right: $padding-horizontal;
        }
    }

    @if $font-size {
        font-size: $font-size;
    }

    @if $line-height {
        line-height: $line-height;
    }

    @if $border-width {
        border-width: $border-width;
    }

    @if $border-radius {
        border-radius: $border-radius;
    }
}

@mixin element-box-by-map(
    $map
) {
    @include element-box(
        map-get($map, width),
        map-get($map, height),
        map-get($map, padding-vertical),
        map-get($map, padding-horizontal),
        map-get($map, border-width),
        map-get($map, border-radius),
        map-get($map, font-size),
        map-get($map, line-height)
    );
}

@mixin element-box-by-name(
    $name:                 null,
    $width:                null,
    $height:               null,
    $padding-vertical:     null,
    $padding-horizontal:   null,
    $border-width:         null,
    $border-radius:        null,
    $font-size:            null,
    $line-height:          null
) {
    @include element-box-by-map(nojiko-get-distinctive-element-box-by-name(
        $name,
        $width,
        $height,
        $padding-vertical,
        $padding-horizontal,
        $border-width,
        $border-radius,
        $font-size,
        $line-height
    ));
}


// =============================================================================
// 设置一个无边框的盒模型尺寸
// 将该盒模型的边框设置为 0，并将原边框宽度分配到水平及垂直内边距上。
// =============================================================================
@mixin element-box-by-name-b(
    $name:                 null,
    $width:                null,
    $height:               null,
    $padding-vertical:     null,
    $padding-horizontal:   null,
    $border-radius:        null,
    $font-size:            null,
    $line-height:          null
) {
    $element-box: nojiko-get-distinctive-element-box-by-name(
        $name,
        $width,
        $height,
        $padding-vertical,
        $padding-horizontal,
        $border-radius,
        $font-size,
        $line-height
    );

    $element-box: nojiko-transfer-element-box-border-width($element-box);

    @include element-box-by-map($element-box);
}

// =============================================================================
// 设置一个无边框的且无水平内边距的盒模型尺寸
// =============================================================================
@mixin element-box-by-name-bh(
    $name:                 null,
    $width:                null,
    $height:               null,
    $padding-vertical:     null,
    $padding-horizontal:   null,
    $border-radius:        null,
    $font-size:            null,
    $line-height:          null
) {
    $element-box: nojiko-get-distinctive-element-box-by-name(
        $name,
        $width,
        $height,
        $padding-vertical,
        $padding-horizontal,
        $border-radius,
        $font-size,
        $line-height
    );

    $element-box: nojiko-transfer-element-box-border-width($element-box);
    $element-box: nojiko-trim-element-box-padding-horizontal($element-box);

    @include element-box-by-map($element-box);
}

// -----------------------------------------------------------------------------
// foreground-color 用于设置元素内的前景色，同时它也会更改链接的样式。
// -----------------------------------------------------------------------------

@mixin foreground-color($color) {
    color: $color;

    // in IE6/7，not support inherit to color property.
    a {
        color: $color;
        font-weight: 700;
        margin: {
            left: 1px;
            right: 1px;
        }
    }

}

// ===========================================================================================================
// 为元素设置半透明背景色，在低版本的 IE 浏览器中，会使用 filter 实现该效果。
//
// 注意: 因为 IE9 同时支持 alpha 以及 filter，因此在应用 IE Hack 时会导致两个设置相互重叠，
// 使得最终显示的颜色要比所设置的颜色深很多，不过万幸的是这并非太严重的问题。
//
// @examples:
//   @include translucent-background(rgba(0, 0, 0, .2));
//   @include translucent-background(#fff, 0.2);
// ===========================================================================================================

@mixin translucent-bgcolor($color, $alpha: false) {

    @if $alpha {
        $color: rgba($color, $alpha);
    }

    background: $color;

    @if $support-for-ie6 or $support-for-ie7 or $support-ie8 {
        zoom: 1\9;
        filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#{ie-hex-str($color)}', EndColorStr='#{ie-hex-str($color)}');
    }
}

// =============================================================================
// 触发一个元素的块级格式化上下文
// =============================================================================

@mixin block-formatting-context {
    display: table-cell;
    @if $support-for-ie6 or $support-for-ie7 {
        *zoom: 1;
    }

    @if $support-for-ie6 {
        _position: relative;
        _left: -3px;
        _margin-right: -3px;
    }

    &:after {
        content: " . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ";
        visibility: hidden;
        clear: both;
        height: 0 !important;
        display: block;
        line-height: 0;
    }
}
